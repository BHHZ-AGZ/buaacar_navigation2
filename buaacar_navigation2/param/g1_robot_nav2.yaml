amcl:
  ros__parameters:
    use_sim_time:  False
    alpha1: 0.1
    alpha2: 0.1
    alpha3: 0.1
    alpha4: 0.1
    alpha5: 0.1
    base_frame_id: "base_link"
    beam_skip_distance: 0.5
    beam_skip_error_threshold: 0.9
    beam_skip_threshold: 0.3
    do_beamskip: false
    global_frame_id: "map"
    lambda_short: 0.1
    set_initial_pose: True
    initial_pose.x: 0.0
    initial_pose.y: 0.0
    initial_pose.z: 0.0
    initial_pose.yaw: 0.0
    laser_likelihood_max_dist: 2.0
    laser_max_range: 15.0
    laser_min_range: 0.5
    laser_model_type: "likelihood_field"
    max_beams: 60
    max_particles: 1000 #粒子的最大允许数量。 ~5000
    min_particles: 500
    odom_frame_id: "odom"
    pf_err: 0.05
    pf_z: 0.99
    recovery_alpha_fast: 0.0
    recovery_alpha_slow: 0.0
    resample_interval: 1
    robot_model_type: "nav2_amcl::DifferentialMotionModel"
    save_pose_rate: 0.5
    sigma_hit: 0.2
    tf_broadcast: true
    transform_tolerance: 1.0
    update_min_a: 0.05
    update_min_d: 0.01
    z_hit: 0.5
    z_max: 0.05
    z_rand: 0.5
    z_short: 0.05
    always_reset_initial_pose: true
    scan_topic: scan
    map_topic: map


bt_navigator:
  ros__parameters:
    use_sim_time: False
    global_frame: map
    robot_base_frame: base_link
    odom_topic: /odometry/filtered
    bt_loop_duration: 50
    default_server_timeout: 20
    wait_for_service_timeout: 1000
    # 'default_nav_through_poses_bt_xml' and 'default_nav_to_pose_bt_xml' are use defaults:
    # nav2_bt_navigator/navigate_to_pose_w_replanning_and_recovery.xml
    # nav2_bt_navigator/navigate_through_poses_w_replanning_and_recovery.xml
    # They can be set here or via a RewrittenYaml remap from a parent launch file to Nav2.
    plugin_lib_names:
      - nav2_compute_path_to_pose_action_bt_node
      - nav2_compute_path_through_poses_action_bt_node
      - nav2_smooth_path_action_bt_node
      - nav2_follow_path_action_bt_node
      - nav2_spin_action_bt_node
      - nav2_wait_action_bt_node
      - nav2_assisted_teleop_action_bt_node
      - nav2_back_up_action_bt_node
      - nav2_drive_on_heading_bt_node
      - nav2_clear_costmap_service_bt_node
      - nav2_is_stuck_condition_bt_node
      - nav2_goal_reached_condition_bt_node
      - nav2_goal_updated_condition_bt_node
      - nav2_globally_updated_goal_condition_bt_node
      - nav2_is_path_valid_condition_bt_node
      - nav2_initial_pose_received_condition_bt_node
      - nav2_reinitialize_global_localization_service_bt_node
      - nav2_rate_controller_bt_node
      - nav2_distance_controller_bt_node
      - nav2_speed_controller_bt_node
      - nav2_truncate_path_action_bt_node
      - nav2_truncate_path_local_action_bt_node
      - nav2_goal_updater_node_bt_node
      - nav2_recovery_node_bt_node
      - nav2_pipeline_sequence_bt_node
      - nav2_round_robin_node_bt_node
      - nav2_transform_available_condition_bt_node
      - nav2_time_expired_condition_bt_node
      - nav2_path_expiring_timer_condition
      - nav2_distance_traveled_condition_bt_node
      - nav2_single_trigger_bt_node
      - nav2_goal_updated_controller_bt_node
      - nav2_is_battery_low_condition_bt_node
      - nav2_navigate_through_poses_action_bt_node
      - nav2_navigate_to_pose_action_bt_node
      - nav2_remove_passed_goals_action_bt_node
      - nav2_planner_selector_bt_node
      - nav2_controller_selector_bt_node
      - nav2_goal_checker_selector_bt_node
      - nav2_controller_cancel_bt_node
      - nav2_path_longer_on_approach_bt_node
      - nav2_wait_cancel_bt_node
      - nav2_spin_cancel_bt_node
      - nav2_back_up_cancel_bt_node
      - nav2_assisted_teleop_cancel_bt_node
      - nav2_drive_on_heading_cancel_bt_node
      - nav2_is_battery_charging_condition_bt_node

bt_navigator_navigate_through_poses_rclcpp_node:
  ros__parameters:
    use_sim_time: False

bt_navigator_navigate_to_pose_rclcpp_node:
  ros__parameters:
    use_sim_time: False

controller_server:
  ros__parameters:
    use_sim_time: False
    controller_frequency: 10.0  #控制器的控制频率。默认值为20.0赫兹。
    min_x_velocity_threshold: 0.3 #机器人在x轴最小线速度。默认值为0.001 ~0.001
    min_y_velocity_threshold: 0.5 #机器人在y轴最小线速度。默认值为0.5
    min_theta_velocity_threshold: 0.2 #机器人的最小旋转角速度。默认值为0.001  ~
    failure_tolerance: 0.3  #机器人执行导航任务时容忍的失败次数。如果机器人在执行导航任务时达到了设定的失败次数，controller_server节点会认为该导航任务失败，停止机器人的运动并返回失败信息。默认值为0.3
    progress_checker_plugin: "progress_checker" #用于指定机器人在沿着全局路径移动时的路径跟踪插件。该参数的默认值为progress_checke。
    allow_replanning: true
    emergency_stop_plugin: "emergency_stop"  # 确保启用紧急停止插件
    goal_checker_plugins: ["general_goal_checker"] # "precise_goal_checker"  用于指定机器人在执行导航任务时的目标检测插件。该参数的默认值为general_goal_checker
    controller_plugins: ["FollowPath"]  #用于指定机器人在执行导航任务时的运动控制插件。该参数的默认值为FollowPath

    # Progress checker parameters 
    #progress_checker插件会根据机器人当前位置和全局路径信息，计算机器人需要沿着全局路径移动的下一个位置，并将该位置作为机器人的目标位置进行控制
    progress_checker:
      plugin: "nav2_controller::SimpleProgressChecker"
      required_movement_radius: 0.5 #用于控制机器人沿着全局路径移动时的偏差容忍度。该参数的默认值为0.5m。
      movement_time_allowance: 10.0 #用于控制机器人沿着全局路径移动时的时间容忍度。该参数的默认值为10s，即机器人在沿着全局路径移动时允许的时间为10s。如果机器人在沿着全局路径移动的时间超过了该时间，progress_checker插件会认为机器人超时了，需要及时调整机器人的运动控制，以确保机器人能够按照预定时间内完成导航任务。

    # Goal checker parameters
    #precise_goal_checker:  
    #  plugin: "nav2_controller::SimpleGoalChecker"
    #  xy_goal_tolerance: 0.25  
    #  yaw_goal_tolerance: 0.25 
    #  stateful: True 
    general_goal_checker: #插件会根据机器人当前位置和目标点信息，计算机器人需要到达的最终目标点，并将该点作为机器人的目标位置进行控制。
      stateful: True  #参数用于指定该插件是否需要维护状态信息。如果设置为 True，该插件会在机器人到达目标位置时将状态信息存储下来，以便后续的任务调度和统计分析。
      plugin: "nav2_controller::SimpleGoalChecker"
      xy_goal_tolerance: 0.25 #参数用于控制机器人到达目标位置时的位置精度。该参数的默认值为0.25m，即机器人到达目标位置时允许的位置误差范围为0.25m。
      yaw_goal_tolerance: 0.25  #参数用于控制机器人到达目标位置时的方向精度。该参数的默认值为0.25rad，即机器人到达目标位置时允许的方向误差范围为0.25rad。
    # DWB parameters
    FollowPath: #插件会根据机器人当前位置和全局路径信息，计算机器人需要采取的线速度和角速度，运用了dwb算法，并将这些速度作为机器人的控制指令进行下发。
      plugin: "dwb_core::DWBLocalPlanner"
      debug_trajectory_details: True
      min_vel_x: 0.3 #最小线速度  ~0.0
      min_vel_y: 0.0  #min_vel_y: 最小侧向速度
      max_vel_x: 0.5 #max_vel_x: 最大线速度 ~0.36
      max_vel_y: 0.0  #max_vel_y: 最大侧向速度
      max_vel_theta: 1.0 #max_vel_theta: 最大角速度
      min_speed_xy: 0.2 #最小平面速度，通常为0  ~0.0
      max_speed_xy: 0.5  #~0.36
      min_speed_theta: 0.0  # 最小角速度，通常为0
      # Add high threshold velocity for turtlebot 3 issue.
      # https://github.com/ROBOTIS-GIT/turtlebot3_simulations/issues/75
      acc_lim_x: 2.5  # x方向加速度限制
      acc_lim_y: 0.0
      acc_lim_theta: 3.2
      decel_lim_x: -2.5 #x方向减速度限制
      decel_lim_y: 0.0
      decel_lim_theta: -3.2
      vx_samples: 20  #线速度采样数，用于搜索最优解
      vy_samples: 5
      vtheta_samples: 20
      sim_time: 1.7 #模拟时间，用于计算轨迹
      linear_granularity: 0.05  #线性路径的分辨率，即路径中相邻两个点之间的距离，单位为m。
      angular_granularity: 0.025  #旋转路径的分辨率，即路径中相邻两个点之间的角度，单位为rad。
      transform_tolerance: 0.5  #机器人状态变换的容忍度，即机器人位置和姿态在传递过程中的误差容忍度。
      xy_goal_tolerance: 0.25 #xy平面的目标容差
      trans_stopped_velocity: 0.25  #线速度小于该值，机器人被认为已停止
      short_circuit_trajectory_evaluation: True #是否提前结束轨迹评估
      stateful: True  #是否保留状态信息
      critics: ["RotateToGoal", "Oscillation", "BaseObstacle", "GoalAlign", "PathAlign", "PathDist", "GoalDist"]  #用于评估轨迹的批评家。这是一个评估器，它根据各种因素对轨迹进行评估，以确定其质量。它是自主导航系统中的一个重要组成部分，因为它可以帮助机器人决定最佳路径。
      BaseObstacle.scale: 0.02  #障碍物评估批评家的权重。这个参数用于调整障碍物评估批评家对轨迹的影响程度。如果这个值越高，那么机器人将更加关注避开障碍物，而不是其他因素。
      PathAlign.scale: 32.0 #路径对齐评估批评家的权重。这个参数用于调整路径对齐评估批评家对轨迹的影响程度。如果这个值越高，那么机器人将更加关注路径对齐，而不是其他因素。
      PathAlign.forward_point_distance: 0.1 #前向点的距离，用于计算路径对齐误差。这个参数用于计算机器人当前位置与路径的偏差，以便评估路径对齐性。
      GoalAlign.scale: 24.0 #目标对齐评估批评家的权重。这个参数用于调整目标对齐评估批评家对轨迹的影响程度。如果这个值越高，那么机器人将更加关注目标对齐，而不是其他因素。
      GoalAlign.forward_point_distance: 0.1 #前向点的距离，用于计算目标对齐误差。这个参数用于计算机器人当前位置与目标的偏差，以便评估目标对齐性。
      PathDist.scale: 32.0  #路径距离评估批评家的权重。这个参数用于调整路径距离评估批评家对轨迹的影响程度。如果这个值越高，那么机器人将更加关注路径的距离，而不是其他因素。
      GoalDist.scale: 24.0  #目标距离评估批评家的权重。这个参数用于调整目标距离评估批评家对轨迹的影响程度。如果这个值越高，那么机器人将更加关注目标的距离，而不是其他因素。
      RotateToGoal.scale: 32.0  #转向目标评估批评家的权重。这个参数用于调整转向目标评估批评家对轨迹的影响程度。如果这个值越高，那么机器人将更加关注转向目标，而不是其他因素。
      RotateToGoal.slowing_factor: 5.0  #减速因子，用于减速到目标。这个参数用于控制机器人接近目标时的速度。如果这个值越高，那么机器人将减速得更快。
      RotateToGoal.lookahead_time: -1.0 #前瞻时间，用于计算转向目标误差。这个参数用于计算机器人当前位置与目标的角度差，以便评估转向目标的精度。如果这个值越高，那么机器人将更加关注转向目标的精度

local_costmap:
  local_costmap:
    ros__parameters:
      update_frequency: 5.0
      publish_frequency: 2.0
      global_frame: odom
      robot_base_frame: base_link
      use_sim_time: False
      rolling_window: true
      width: 3
      height: 3
      resolution: 0.05
      # robot_radius: 0.275
      footprint: "[[0.55,0.275],[0.55,-0,275],[0, -0.275],[0,0.275]]"
      plugins: ["static_layer", "obstacle_layer"]
      inflation_layer: #膨胀层插件名称
        enabled: True
        plugin: "nav2_costmap_2d::InflationLayer"
        cost_scaling_factor: 3.0  #膨胀半径上的指数衰减因子
        inflation_radius: 1.0  #扩大致命障碍物周围的成本图的半径。
      obstacle_layer:
        plugin: "nav2_costmap_2d::ObstacleLayer"
        enabled: True
        observation_sources: scan
        scan:
          topic: /scan
          max_obstacle_height: 2.0
          clearing: True
          marking: True
          data_type: "LaserScan"
      static_layer:
        plugin: "nav2_costmap_2d::StaticLayer"
        map_subscribe_transient_local: True
      always_send_full_costmap: True
  local_costmap_client:
    ros__parameters:
      use_sim_time: False
  local_costmap_rclcpp_node:
    ros__parameters:
      use_sim_time: False
global_costmap:
  global_costmap:
    ros__parameters:
      update_frequency: 1.0
      publish_frequency: 1.0
      global_frame: map
      robot_base_frame: base_link
      use_sim_time: False
      # robot_radius: 0.275
      footprint: "[[0.55,0.275],[0.55,-0,275],[0, -0.275],[0,0.275]]"
      resolution: 0.05
      track_unknown_space: true
      plugins: ["static_layer", "obstacle_layer", "inflation_layer"]
      obstacle_layer:
        plugin: "nav2_costmap_2d::ObstacleLayer"
        enabled: True
        observation_sources: scan
        scan:
          topic: /scan
          max_obstacle_height: 2.0
          clearing: True
          marking: True
          data_type: "LaserScan"
          raytrace_max_range: 3.0
          raytrace_min_range: 0.0
          obstacle_max_range: 2.5
          obstacle_min_range: 0.0
      static_layer:
        plugin: "nav2_costmap_2d::StaticLayer"
        map_subscribe_transient_local: True
      inflation_layer:
        plugin: "nav2_costmap_2d::InflationLayer"
        cost_scaling_factor: 3.0
        inflation_radius: 0.70
      always_send_full_costmap: True
  global_costmap_client:
    ros__parameters:
      use_sim_time: False
  global_costmap_rclcpp_node:
    ros__parameters:
      use_sim_time: False

map_server:
  ros__parameters:
    use_sim_time: False
    # Overridden in launch by the "map" launch configuration or provided default value.
    # To use in yaml, remove the default "map" value in the tb3_simulation_launch.py file & provide full path to map below.
    yaml_filename: ""

map_saver:
  ros__parameters:
    use_sim_time: False
    save_map_timeout: 5.0
    free_thresh_default: 0.15
    occupied_thresh_default: 0.65
    map_subscribe_transient_local: True

planner_server:
  ros__parameters:
    expected_planner_frequency: 2.0   #路径规划的频率，即规划器每秒钟生成的路径数。默认值为0.0，表示不限制频率。
    use_sim_time: False
    planner_plugins: ["GridBased"]   #路径规划器的插件名称，即使用哪个路径规划器实现路径规划。默认值为grid_based，即使用基于栅格地图的路径规划器。也可以设置为其他插件名称，例如navfn、navfn_planner、teb_local_planner等。
    GridBased:
      plugin: "nav2_navfn_planner/NavfnPlanner"
      tolerance: 0.25   #路径规划器的默认容忍误差，即机器人到达目标点的最大距离误差。默认值为0.5米。
      use_astar: true  #是否使用A*算法进行路径规划。默认值为false。
      allow_unknown: false   #是否允许路径规划经过未知区域。默认值为false。
      smooth_path: true
      angle: 0.05
planner_server_rclcpp_node:
  ros__parameters:
    use_sim_time: False
    
smoother_server:
  ros__parameters:
    use_sim_time: False
    costmap_topic: global_costmap/costmap_raw
    footprint_topic: global_costmap/published_footprint
    robot_base_frame: base_link
    transform_timeout: 0.1
    smoother_plugins: ["simple_smoother"]
    simple_smoother:
      plugin: "nav2_smoother::SimpleSmoother"
      tolerance: 1.0e-10
      do_refinement: False
      refinement_num: 2
      max_its: 1000
      w_data: 0.1
      w_smooth: 0.5

recoveries_server:
  ros__parameters:
    costmap_topic: local_costmap/costmap_raw
    footprint_topic: local_costmap/published_footprint
    cycle_frequency: 10.0
    recovery_plugins: ["spin", "backup", "wait"]
    spin:
      plugin: "nav2_recoveries/Spin"
    backup:
      plugin: "nav2_recoveries/BackUp"
    wait:
      plugin: "nav2_recoveries/Wait"
    global_frame: odom
    robot_base_frame: base_link
    transform_timeout: 0.1
    use_sim_time: False
    simulate_ahead_time: 2.0
    max_rotational_vel: 1.0
    min_rotational_vel: 0.4
    rotational_acc_lim: 3.2

robot_state_publisher:
  ros__parameters:
    use_sim_time: False

waypoint_follower:
  ros__parameters:
    use_sim_time: False
    loop_rate: 10
    stop_on_failure: false
    waypoint_task_executor_plugin: "wait_at_waypoint"
    wait_at_waypoint:
      plugin: "nav2_waypoint_follower::WaitAtWaypoint"
      enabled: True
      waypoint_pause_duration: 200

velocity_smoother:  #速度平滑器
  ros__parameters:
    use_sim_time: False 
    smoothing_frequency: 20.0 #平滑算法的执行频率
    scale_velocities: False #是否按比例缩放速度命令以满足最大加速度限制。
    feedback: "CLOSED_LOOP"
    max_velocity: [0.26, 0.0, 1.0]
    min_velocity: [-0.26, 0.0, -1.0]
    max_accel: [2.5, 0.0, 3.2]
    max_decel: [-2.5, 0.0, -3.2]
    odom_topic: "odometry/filtered"
    odom_duration: 0.1
    deadband_velocity: [0.0, 0.0, 0.0]
    velocity_timeout: 1.0